generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  name                  String?
  emailVerified         DateTime?
  image                 String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  otpSecret             String?
  otpVerified           Boolean   @default(false)
  pages                 Page[]

  @@map("users")
}

model OtpVerification {
  id        String   @id @default(cuid())
  email     String
  otpCode   String
  expiresAt DateTime
  createdAt DateTime @default(now())
  verified  Boolean  @default(false)

  @@map("otp_verifications")
}

model Page {
  id            String         @id @default(cuid())
  slug          String         @unique
  displayName   String
  isPublished   Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  themeMode     String         @default("dark")
  themeColor    String         @default("cyan")
  themeShape    String         @default("rounded")
  coverPhotoUrl String?
  bio           String?
  genre         String?
  userId        String?
  customButtons CustomButton[]
  events        Event[]
  featuredItems FeaturedItem[]
  fullSets      FullSet[]
  links         Link[]
  user          User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialLinks   SocialLink[]
  tracks        Track[]

  @@map("pages")
}

model Link {
  id        String  @id @default(cuid())
  pageId    String
  platform  String
  url       String
  isVisible Boolean @default(true)
  order     Int     @default(0)
  page      Page    @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("links")
}

model SocialLink {
  id       String @id @default(cuid())
  pageId   String
  platform String
  url      String
  page     Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("social_links")
}

model CustomButton {
  id     String @id @default(cuid())
  pageId String
  text   String
  url    String
  order  Int    @default(0)
  page   Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("custom_buttons")
}

model FeaturedItem {
  id       String  @id @default(cuid())
  pageId   String
  title    String
  subtitle String?
  imageUrl String?
  ctaUrl   String?
  order    Int     @default(0)
  page     Page    @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("featured_items")
}

model Track {
  id              String  @id @default(cuid())
  pageId          String
  name            String
  credits         String?
  artworkUrl      String?
  order           Int     @default(0)
  appleMusicUrl   String?
  beatportUrl     String?
  soundcloudUrl   String?
  spotifyUrl      String?
  youtubeMusicUrl String?
  youtubeUrl      String?
  page            Page    @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("tracks")
}

model Event {
  id       String   @id @default(cuid())
  pageId   String
  title    String
  date     DateTime
  location String?
  url      String?
  order    Int      @default(0)
  page     Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("events")
}

model FullSet {
  id              String  @id @default(cuid())
  pageId          String
  title           String
  url             String
  order           Int     @default(0)
  date            String?
  location        String?
  thumbnailUrl    String?
  appleMusicUrl   String?
  beatportUrl     String?
  soundcloudUrl   String?
  spotifyUrl      String?
  youtubeMusicUrl String?
  youtubeUrl      String?
  page            Page    @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("full_sets")
}
